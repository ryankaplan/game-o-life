interface MouseBehavior {
    def down(x int, y int)
    def move(x int, y int)
    def up(x int, y int)
    def scroll(delta double)
}

############################################################################

class DragMouseBehavior :: MouseBehavior {
    var _controller Controller

    var _onDownGridSpace Box<Vector> = null
    var _onDownViewport Box<Rect> = null

    def down(x int, y int) {
        _onDownViewport = Box<Rect>.new(_controller.viewport.clone)
        _onDownGridSpace = Box<Vector>.new(_gridSpaceFromCanvasSpace(x, y))
    }

    def move(x int, y int) {
        if _onDownGridSpace == null {
            return
        }

        const onMoveGridSpace = _gridSpaceFromCanvasSpace(x, y)
        const delta = _delta(onMoveGridSpace)
        _controller.viewport.origin = _onDownViewport.value.origin + delta
    }

    def up(x int, y int) {
        if _onDownGridSpace != null {
            const onUpGridSpace = _gridSpaceFromCanvasSpace(x, y)
            const delta = _delta(onUpGridSpace)
            if delta.length > 10 {
                _controller.viewport.origin = _onDownViewport.value.origin + delta
            }
        }

        _reset
    }

    def scroll(delta double) {}

    def _reset {
        _onDownGridSpace = null
        _onDownViewport = null
    }

    def _gridSpaceFromCanvasSpace(x int, y int) Vector {
        if _onDownViewport == null {
            throw Error.new("TODO(ryan)")
        }

        const canvasSize = Vector.new(_controller.canvas.width, _controller.canvas.height)
        const canvasSpaceUv = Vector.new(x, y) / canvasSize
        return _onDownViewport.value.pointAtUvCoordinate(canvasSpaceUv)
    }

    def _delta(newLocation Vector) Vector {
        if _onDownGridSpace == null {
            throw Error.new("TODO(ryan)")
        }

        const delta = _onDownGridSpace.value - newLocation
        delta.y *= -1
        return delta
    }
}

############################################################################

namespace ZoomMouseBehavior {
    const minSize = 15
    const maxSize = 2500
}

class ZoomMouseBehavior :: MouseBehavior {
    var _controller Controller

    def down(x int, y int) {}
    def move(x int, y int) {}
    def up(x int, y int) {}

    def scroll(delta_ double) {
        const delta = Vector.new(delta_, delta_)
        const newOffset = _controller.viewport.origin - delta / 2
        const newSize = _controller.viewport.size + delta

        if newSize.x > minSize && newSize.y > minSize && newSize.x < maxSize && newSize.y < maxSize {
            _controller.viewport.origin = newOffset
            _controller.viewport.size = newSize
        }
    }
}
