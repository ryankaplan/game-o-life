# This class shamelessly stolen and edited from https://github.com/evanw/theta/blob/master/src/core/vector.sk
# I started writing it myself and couldn't be bothered to type it all out

enum Axis {
    X
    Y
}

class Vector {
	var x double
	var y double

	def new(x double, y double) {
		self.x = x
		self.y = y
	}

	def - Vector { return new(-x, -y) }

	def +(v Vector) Vector { return new(x + v.x, y + v.y) }
	def -(v Vector) Vector { return new(x - v.x, y - v.y) }
	def *(v Vector) Vector { return new(x * v.x, y * v.y) }
	def /(v Vector) Vector { return new(x / v.x, y / v.y) }

	def +(d double) Vector { return new(x + d, y + d) }
	def -(d double) Vector { return new(x - d, y - d) }
	def *(d double) Vector { return new(x * d, y * d) }
	def /(d double) Vector { return new(x / d, y / d) }

	def +=(v Vector) {
		x += v.x
		y += v.y
	}

	def -=(v Vector) {
		x -= v.x
		y -= v.y
	}

	def *=(v Vector) {
		x *= v.x
		y *= v.y
	}

	def /=(v Vector) {
		x /= v.x
		y /= v.y
	}

	def +=(d double) {
		x += d
		y += d
	}

	def -=(d double) {
		x -= d
		y -= d
	}

	def *=(d double) {
		x *= d
		y *= d
	}

	def /=(d double) {
		x /= d
		y /= d
	}

    def set(x double, y double) Vector {
		self.x = x
		self.y = y
		return self
	}

	def set(v Vector) Vector {
		x = v.x
		y = v.y
		return self
	}

    def rotate(angleRad double) Vector {
        return new(
            x * Math.cos(angleRad) - y * Math.sin(angleRad),
            y * Math.cos(angleRad) + x * Math.sin(angleRad)
        )
    }

    # Returns as unit vector
    def normalize Vector { return self / self.length }

    # Returns the angle of this vector in radians
    def toAngleRad double { return Math.atan2(y, x) }

    def angleTo(v Vector) double {
        return Math.acos(
            self.normalize.dot(v.normalize)
        )
    }

    def signedAngleTo(v Vector) double { return v.toAngleRad - toAngleRad }
    def distanceTo(v Vector) double { return (self - v).length }
	def equals(v Vector) bool { return x == v.x && y == v.y }
	def length double { return Math.sqrt(x * x + y * y) }
	def dot(v Vector) double { return x * v.x + y * v.y }
	def clone Vector { return new(x, y) }
	def toString string { return "Vector(\(x), \(y))" }
    def toStringAsInts string { return "Vector(\(x as int), \(y as int))" }
    def toFloat32Array Float32Array { return Float32Array.new([x, y]) }

    def constrainToAspectRatio(other Vector, freeAxis Axis) {
        # TODO(ryan): change this to a switch statement once the skew
        # compiler is fixed
        if freeAxis == Axis.X {
            x = y * other.x / other.y
        } else {
            y = x * other.y / other.x
        }
    }
}

namespace Vector {
	@neverinline
	def new Vector {
		return new(0, 0)
	}
}