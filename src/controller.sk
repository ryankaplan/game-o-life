
class Controller {
    var _canvas HTMLCanvasElement
    var _simulation Simulation
    var _igloo Igloo
    var _programs StringMap<Igloo.Program>
    var _buffers StringMap<Igloo.Buffer>

    # Size of the canvas HTML element. This is the size of our view-textures.
    var _canvasSize int

    def new(canvas HTMLCanvasElement) {
        _canvas = canvas
        _canvasSize = _canvas.width
        assert(_canvas.width == _canvas.height)

        _igloo = Igloo.new(canvas)
        if _igloo.gl == null {
            throw "TODO(ryan): handle this"
        }

        _simulation = Simulation.new(_igloo, _canvas.width / cellSize)

        var gl = _igloo.gl
        gl.disable(gl.DEPTH_TEST)

        _programs = {
            "copy": _igloo.program("glsl/quad.vert", "glsl/copy.frag")
        }

        _buffers = {
            "quad": _igloo.array(Igloo.QUAD2)
        }
    }

    def draw {
        # As per the comment at the top of 'step', the current grid
        # state is stored in the 'front' texture. So we bind that to
        # index 0 and pass that to the shader as cellGridTexture.
        _igloo.defaultFramebuffer.bind
        _simulation.gridTexture.bind(0)
        _igloo.gl.viewport(0, 0, _canvasSize, _canvasSize)
        _programs["copy"]
            .use
            .attrib("quad", _buffers["quad"], 2)
            .uniformi("cellGridTexture", 0)
            .uniform("canvasSize", Float32Array.new([_canvasSize, _canvasSize]))
            .uniform("pageSize", Float32Array.new([_canvas.width, _canvas.height]))
            .draw(_igloo.gl.TRIANGLE_STRIP, 4)
    }

    def start {
        setInterval(() => {
            _simulation.step
            draw
        }, 60)
    }
}